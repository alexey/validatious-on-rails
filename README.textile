h1. VALIDATIOUS-ON-RAILS ~ concept version ~

_Rails plugin that maps model validations to class names on form elements to integrate with Validatious._

h2. What Is Validatious?

*Elevator pitch:* A (kick-ass) unobtrusive client-side validation javascript library - the only one you'll ever need.

"http://validatious.org":http://validatious.org

h2. Features & Goals

*Current Features:*

* Rails core validations
** @validates_acceptance_of@ (a bit unstable it seems: Validatious vs. Rails input-attributes clash)
** @validates_confirmation_of@
** @validates_exclusion_of@ *new*
** @validates_format_of@ *new*
** @validates_inclusion_of@ *new*
** @validates_length_of@
** @validates_numericality_of@ (partial - will be full soon)
** @validates_presence_of@ (use this one instead of @validates_acceptance_of@ - it works the same way without Validatious and Rails clash)
** @validates_size_of@ *new*
** _(Work in progress...)_
* Generator for getting started - easy as 1-2-3 (see below)
* Ruby representation of @v2.Validator@
* Test-suit
* Ruby 1.9.x support
* For the near fanatic Formtastic form-builder users like me: With default config, it's compatible with the Formtastic semantic HTML structure.

_*Note:* Just started so...expect the list to expand - especially validations. See the "TODO":http://github.com/grimen/validatious-on-rails/blob/master/TODO for more info._

*Goals:*

* Should be very easy to extend with custom validations (plugins, e.g. @Validatious::Validators.add MyCustomValidator@), but within the domain of *Validatious* (focus) - no vision of support multiple libraries (only makes the code base unnecessary big and complex)
* Should support all Rails core validations (using preferably *client-side* validation, or last-resort solution using *server-side* validation - backed by Validatious)
* Should not only perform the validations, but also respect the Rails validation conditionals (such as :on, :allow_blank, etc.)
* Support all Rails core form helpers, but also new ones using pluggable interface
* Full I18n-support - backed by Rails I18n (incl. interpolation)
* Full coverage tests

_*Note:* Somethings fundamental is missing? Let me know! =)_

h2. Installation

*Gem:*

<pre>sudo gem install grimen-validatious-on-rails</pre>

and in @config/environment.rb@:

<pre>config.gem 'grimen-validatious-on-rails', :lib => 'validatious-on-rails'</pre>

*Plugin:*

<pre>./script/plugin install git://github.com/grimen/validatious-on-rails.git</pre>

*Dependencies:*

* "validatious":http://github.com/cjohansen/validatious - the DSL-extension is optional, but I very much recommend the full package (it's so tiny in size anyway)
* "validation_reflection":http://github.com/redinger/validation_reflection

*Note:* For testing, get "acts_as_fu":http://github.com/nakajima/acts_as_fu.

h2. Configuration

h3. 1. Generate required javascript files

<pre>
$ ./script/generate validatious                                                                                                                                                              
      create  public/javascripts/v2.standalone.full.min.js
      create  public/javascripts/validatious.config.js
</pre>

h3. 2. Include the javascripts in your layout

@app/views/application.html.erb@ or similar:

<pre>
<head>
  ...
  <%= javascript_include_tag 'v2.standalone.full.min.js', 'validatious.config.js' # 1) %>
  <%= content_tag(:script, yield(:validatious), :type => 'text/javascript') # 2) %>
  ...
</head>
</pre>

*Notes:*

# @validatious.config.js@ is optional, but contains some default Valdiatious-configuration that easily can be tweaked or extended - see "Validatious documentation":http://validatious.org/learn.
# FYI, this is where custom validations gets inserted. No worries; the plugin is doing the magic!

h2. Usage

*Easy!*

Consider you got some model validations:

<pre>
class Post < ActiveRecord::Base
  validates_presence_of :title
  validates_length_of :title, :within => 3..20
end
</pre>

...then you now got working client-side validations for any forms with class @validate@ (or any custom class - see documentation/config):

<pre>
<% form_for(@post, :html => {:class => 'validate'}) do |f| %>
  <%= f.text_field :title %>
<% end %>
</pre>

h2. Extra: Formtastic  â™¥ Validatious

For all you Formtastic users out there: This plugin is out-of-the-box compatible with Formtastic - unlike the similar solution(s) out there. But to get Validatious and Formtastic to play well with each other, you need to tweak the *configuration* settings a bit. These settings is very much recommended:

*Formtastic:*

<pre>
Formtastic::SemanticFormBuilder.inline_errors = :list
Formtastic::SemanticFormBuilder.inline_order  = [:input, :hints, :errors]
</pre>

*Validatious:*

<pre>
v2.Field.prototype.positionErrorsAbove = false;
v2.Fieldset.prototype.positionErrorsAbove = false;
v2.Fieldset.prototype.messagesClass = 'errors';
v2.Fieldset.prototype.failureClass = 'error';
v2.Fieldset.prototype.successClass = '';
v2.Field.prototype.messagesClass = 'errors';
v2.Field.prototype.failureClass = 'error';
v2.Field.prototype.successClass = '';
</pre>

h2. Limitations

This is very much work-in-progress, so there are some known limitations that should work very soon. For example some validations are not supported yet - either because it takes some tricks, or it's not scalable without AJAX. See @TODO@.

h2. Origin

This project was originally forked from:

"http://github.com/cjohansen/validatious-on-rails":http://github.com/cjohansen/validatious-on-rails

h2. License

*Original work:*

Released under the MIT license.<br />
Copyright (c) 2008 "Christian Johansen":http://github.com/cjohansen

*Additional work:*

Released under the MIT license.<br />
Copyright (c) 2009 "Jonas Grimfelt":http://github.com/grimen
